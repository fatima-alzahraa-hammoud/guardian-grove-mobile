import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import '../../bloc/auth/auth_bloc.dart';
import '../../bloc/auth/auth_event.dart';
import '../../bloc/auth/auth_state.dart';
import '../../../data/models/user_model.dart';
import '../../../core/constants/app_colors.dart';
import 'add_member_choice_dialog.dart';

class ProfileSetupScreen extends StatefulWidget {
  final String name;
  final String email;
  final String password;
  final String confirmPassword;

  const ProfileSetupScreen({
    super.key,
    required this.name,
    required this.email,
    required this.password,
    required this.confirmPassword,
  });

  @override
  State<ProfileSetupScreen> createState() => _ProfileSetupScreenState();
}

class _ProfileSetupScreenState extends State<ProfileSetupScreen> {
  final PageController _pageController = PageController();
  int _currentStep = 0;

  // Form data
  String _selectedRole = '';
  String _selectedGender = '';
  String _selectedAvatar = '';
  String _familyAvatar = '';
  DateTime? _selectedBirthday;
  List<String> _interests = [];
  final TextEditingController _familyNameController = TextEditingController();

  // Avatar options with fun colors
  final List<Map<String, dynamic>> _avatars = [
    {'id': 'happy_child', 'icon': Icons.child_care, 'color': AppColors.primaryPink, 'label': 'Happy Kid'},
    {'id': 'smart_child', 'icon': Icons.school, 'color': AppColors.primaryBlue, 'label': 'Smart Kid'},
    {'id': 'sporty_child', 'icon': Icons.sports_soccer, 'color': AppColors.primaryGreen, 'label': 'Sporty Kid'},
    {'id': 'creative_child', 'icon': Icons.palette, 'color': AppColors.primaryPurple, 'label': 'Creative Kid'},
    {'id': 'music_child', 'icon': Icons.music_note, 'color': AppColors.primaryOrange, 'label': 'Musical Kid'},
    {'id': 'tech_child', 'icon': Icons.computer, 'color': AppColors.primaryTeal, 'label': 'Tech Kid'},
    {'id': 'mom', 'icon': Icons.woman, 'color': AppColors.primaryPink, 'label': 'Mom'},
    {'id': 'dad', 'icon': Icons.man, 'color': AppColors.primaryBlue, 'label': 'Dad'},
  ];

  // Fun interest options with emojis
  final List<String> _interestOptions = [
    '⚽ Sports & Games', '🎨 Arts & Crafts', '📚 Reading & Stories', '🎵 Music & Dance',
    '🔬 Science & Experiments', '🎮 Video Games', '🌳 Outdoor Adventures', '🍳 Cooking & Baking',
    '🐶 Animals & Pets', '🔧 Building & Making', '📸 Photography', '✏️ Drawing & Painting',
    '🎲 Board Games', '🏊 Swimming', '🏃 Running & Fitness', '💻 Technology',
    '🌱 Gardening', '🎬 Movies & Shows', '🧩 Puzzles', '🚀 Space & Astronomy',
  ];

  void _nextStep() {
    if (_currentStep < 4) {
      setState(() => _currentStep++);
      _pageController.nextPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _prevStep() {
    if (_currentStep > 0) {
      setState(() => _currentStep--);
      _pageController.previousPage(
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeInOut,
      );
    }
  }

  void _completeRegistration() {
    // Validate required fields
    if (_selectedRole.isEmpty || _selectedGender.isEmpty || 
        _familyNameController.text.trim().isEmpty || _selectedAvatar.isEmpty || 
        _familyAvatar.isEmpty || _selectedBirthday == null) {
      _showErrorSnackBar('Please complete all required fields');
      return;
    }

    // Create register request
    final registerRequest = RegisterRequest(
      name: widget.name.trim(),
      email: widget.email.trim().toLowerCase(),
      password: widget.password,
      confirmPassword: widget.confirmPassword,
      birthday: _selectedBirthday!,
      gender: _selectedGender.toLowerCase(),
      role: _selectedRole.toLowerCase(),
      avatar: _selectedAvatar,
      interests: _interests,
      familyName: _familyNameController.text.trim(),
      familyAvatar: _familyAvatar,
    );

    // Submit registration
    context.read<AuthBloc>().add(RegisterEvent(registerRequest));
  }

  void _showErrorSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Row(
          children: [
            const Icon(Icons.warning, color: Colors.white),
            const SizedBox(width: 8),
            Expanded(child: Text(message)),
          ],
        ),
        backgroundColor: AppColors.error,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return BlocListener<AuthBloc, AuthState>(
      listener: (context, state) {
        if (state is AuthAuthenticated) {
          // Show add member choice dialog after successful registration
          showDialog(
            context: context,
            barrierDismissible: false,
            builder: (context) => const AddMemberChoiceDialog(),
          );
        } else if (state is AuthError) {
          _showErrorSnackBar(state.message);
        }
      },
      child: Scaffold(
        body: Container(
          decoration: const BoxDecoration(gradient: AppColors.childishGradient),
          child: SafeArea(
            child: Column(
              children: [
                // Colorful progress bar
                _buildProgressBar(),
                
                // Page content
                Expanded(
                  child: PageView(
                    controller: _pageController,
                    physics: const NeverScrollableScrollPhysics(),
                    children: [
                      _buildRoleStep(),
                      _buildPersonalInfoStep(),
                      _buildFamilyStep(),
                      _buildAvatarStep(),
                      _buildInterestsStep(),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildProgressBar() {
    return Container(
      padding: const EdgeInsets.all(20),
      child: Row(
        children: List.generate(5, (index) {
          return Expanded(
            child: Container(
              height: 6,
              margin: EdgeInsets.only(right: index == 4 ? 0 : 8),
              decoration: BoxDecoration(
                gradient: index <= _currentStep ? AppColors.sunsetGradient : null,
                color: index <= _currentStep ? null : Colors.white.withOpacity(0.3),
                borderRadius: BorderRadius.circular(3),
              ),
            ),
          );
        }),
      ),
    );
  }

  Widget _buildRoleStep() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          _buildStepHeader('🌟 Welcome to Guardian Grove! 🌟', 'Are you a parent or child?'),
          const SizedBox(height: 40),
          
          Expanded(
            child: Column(
              children: [
                _buildRoleCard('Parent', Icons.family_restroom, 'I take care of my family! 👨‍👩‍👧‍👦', AppColors.primaryBlue),
                const SizedBox(height: 20),
                _buildRoleCard('Child', Icons.child_care, 'I love fun and adventures! 🎉', AppColors.primaryPink),
              ],
            ),
          ),
          
          _buildNextButton(_selectedRole.isNotEmpty),
        ],
      ),
    );
  }

  Widget _buildPersonalInfoStep() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          _buildBackButton(),
          _buildStepHeader('👦👧 Tell us about yourself!', 'Personal information'),
          const SizedBox(height: 40),
          
          Expanded(
            child: Column(
              children: [
                // Gender selection
                Row(
                  children: [
                    Expanded(child: _buildGenderCard('Male', Icons.male, AppColors.primaryBlue)),
                    const SizedBox(width: 16),
                    Expanded(child: _buildGenderCard('Female', Icons.female, AppColors.primaryPink)),
                  ],
                ),
                
                const SizedBox(height: 30),
                
                // Birthday selection
                Container(
                  padding: const EdgeInsets.all(20),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(20),
                  ),
                  child: Column(
                    children: [
                      const Text('🎂 When\'s your birthday?', 
                        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold, color: AppColors.primaryBlue)),
                      const SizedBox(height: 16),
                      GestureDetector(
                        onTap: _selectBirthday,
                        child: Container(
                          padding: const EdgeInsets.all(16),
                          decoration: BoxDecoration(
                            border: Border.all(color: AppColors.primaryTeal),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.center,
                            children: [
                              Icon(Icons.calendar_today, color: AppColors.primaryTeal),
                              const SizedBox(width: 8),
                              Text(
                                _selectedBirthday != null
                                    ? '${_selectedBirthday!.day}/${_selectedBirthday!.month}/${_selectedBirthday!.year}'
                                    : 'Select your birthday',
                                style: TextStyle(
                                  color: _selectedBirthday != null ? AppColors.darkGray : AppColors.mediumGray,
                                  fontSize: 16,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          _buildNextButton(_selectedGender.isNotEmpty && _selectedBirthday != null),
        ],
      ),
    );
  }

  Widget _buildFamilyStep() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          _buildBackButton(),
          _buildStepHeader('🏠 Family Information', 'What\'s your family name?'),
          const SizedBox(height: 40),
          
          Expanded(
            child: Container(
              padding: const EdgeInsets.all(30),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.9),
                borderRadius: BorderRadius.circular(20),
              ),
              child: Column(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  const Icon(Icons.family_restroom, size: 80, color: AppColors.primaryTeal),
                  const SizedBox(height: 30),
                  TextField(
                    controller: _familyNameController,
                    style: const TextStyle(fontSize: 20, fontWeight: FontWeight.w500, color: AppColors.darkGray),
                    decoration: const InputDecoration(
                      hintText: 'Enter your family name',
                      hintStyle: TextStyle(color: AppColors.mediumGray),
                      border: InputBorder.none,
                    ),
                    textAlign: TextAlign.center,
                    onChanged: (value) => setState(() {}),
                  ),
                ],
              ),
            ),
          ),
          
          _buildNextButton(_familyNameController.text.trim().isNotEmpty),
        ],
      ),
    );
  }

  Widget _buildAvatarStep() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          _buildBackButton(),
          _buildStepHeader('🎨 Choose Your Avatars!', 'Pick personal and family avatars'),
          const SizedBox(height: 20),
          
          Expanded(
            child: SingleChildScrollView(
              child: Column(
                children: [
                  // Personal Avatar
                  _buildAvatarSection('Your Avatar', _selectedAvatar, (id) => setState(() => _selectedAvatar = id)),
                  const SizedBox(height: 20),
                  // Family Avatar
                  _buildAvatarSection('Family Avatar', _familyAvatar, (id) => setState(() => _familyAvatar = id)),
                ],
              ),
            ),
          ),
          
          _buildNextButton(_selectedAvatar.isNotEmpty && _familyAvatar.isNotEmpty),
        ],
      ),
    );
  }

  Widget _buildInterestsStep() {
    return Padding(
      padding: const EdgeInsets.all(24),
      child: Column(
        children: [
          _buildBackButton(),
          _buildStepHeader('🎯 What do you love?', 'Select your interests (optional)'),
          const SizedBox(height: 20),
          
          Expanded(
            child: Column(
              children: [
                // Interest selection dropdown
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 16),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.9),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: DropdownButtonHideUnderline(
                    child: DropdownButton<String>(
                      hint: const Text('Select an interest', style: TextStyle(color: AppColors.mediumGray)),
                      isExpanded: true,
                      items: _interestOptions.map((interest) {
                        return DropdownMenuItem(value: interest, child: Text(interest));
                      }).toList(),
                      onChanged: (interest) {
                        if (interest != null && !_interests.contains(interest)) {
                          setState(() => _interests.add(interest));
                        }
                      },
                    ),
                  ),
                ),
                
                const SizedBox(height: 20),
                
                // Selected interests
                Expanded(
                  child: _interests.isNotEmpty 
                      ? Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: _interests.map((interest) => Chip(
                            label: Text(interest, style: const TextStyle(color: Colors.white)),
                            backgroundColor: AppColors.primaryTeal,
                            deleteIcon: const Icon(Icons.close, color: Colors.white, size: 18),
                            onDeleted: () => setState(() => _interests.remove(interest)),
                          )).toList(),
                        )
                      : Container(
                          decoration: BoxDecoration(
                            color: Colors.white.withOpacity(0.9),
                            borderRadius: BorderRadius.circular(16),
                          ),
                          child: const Center(
                            child: Column(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Icon(Icons.favorite, size: 60, color: AppColors.primaryPink),
                                SizedBox(height: 16),
                                Text('No interests selected yet\nThat\'s okay! You can add them later.', 
                                  textAlign: TextAlign.center,
                                  style: TextStyle(color: AppColors.mediumGray, fontSize: 16)),
                              ],
                            ),
                          ),
                        ),
                ),
              ],
            ),
          ),
          
          _buildCompleteButton(),
        ],
      ),
    );
  }

  Widget _buildStepHeader(String title, String subtitle) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white.withOpacity(0.9),
        borderRadius: BorderRadius.circular(20),
      ),
      child: Column(
        children: [
          Text(title, style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold, color: AppColors.primaryBlue), textAlign: TextAlign.center),
          const SizedBox(height: 8),
          Text(subtitle, style: const TextStyle(fontSize: 16, color: AppColors.darkGray), textAlign: TextAlign.center),
        ],
      ),
    );
  }

  Widget _buildRoleCard(String role, IconData icon, String subtitle, Color color) {
    final isSelected = _selectedRole == role;
    return GestureDetector(
      onTap: () => setState(() => _selectedRole = role),
      child: Container(
        padding: const EdgeInsets.all(20),
        decoration: BoxDecoration(
          gradient: isSelected ? LinearGradient(colors: [color, color.withOpacity(0.7)]) : null,
          color: isSelected ? null : Colors.white.withOpacity(0.9),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: isSelected ? Colors.white : Colors.transparent, width: 3),
          boxShadow: [BoxShadow(color: isSelected ? color.withOpacity(0.3) : Colors.black.withOpacity(0.1), blurRadius: 15, offset: const Offset(0, 5))],
        ),
        child: Row(
          children: [
            Container(
              width: 60, height: 60,
              decoration: BoxDecoration(color: isSelected ? Colors.white.withOpacity(0.2) : color.withOpacity(0.1), borderRadius: BorderRadius.circular(15)),
              child: Icon(icon, size: 32, color: isSelected ? Colors.white : color),
            ),
            const SizedBox(width: 20),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(role, style: TextStyle(color: isSelected ? Colors.white : AppColors.darkGray, fontSize: 24, fontWeight: FontWeight.bold)),
                  Text(subtitle, style: TextStyle(color: isSelected ? Colors.white.withOpacity(0.9) : AppColors.mediumGray, fontSize: 16)),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildGenderCard(String gender, IconData icon, Color color) {
    final isSelected = _selectedGender == gender;
    return GestureDetector(
      onTap: () => setState(() => _selectedGender = gender),
      child: Container(
        height: 80,
        decoration: BoxDecoration(
          gradient: isSelected ? LinearGradient(colors: [color, color.withOpacity(0.7)]) : null,
          color: isSelected ? null : Colors.white.withOpacity(0.9),
          borderRadius: BorderRadius.circular(20),
          border: Border.all(color: isSelected ? Colors.white : Colors.transparent, width: 3),
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(icon, size: 32, color: isSelected ? Colors.white : color),
            const SizedBox(width: 12),
            Text(gender, style: TextStyle(color: isSelected ? Colors.white : AppColors.darkGray, fontSize: 20, fontWeight: FontWeight.bold)),
          ],
        ),
      ),
    );
  }

  Widget _buildAvatarSection(String title, String selectedId, Function(String) onSelect) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(color: Colors.white.withOpacity(0.9), borderRadius: BorderRadius.circular(16)),
      child: Column(
        children: [
          Text(title, style: const TextStyle(color: AppColors.primaryBlue, fontSize: 18, fontWeight: FontWeight.bold)),
          const SizedBox(height: 16),
          GridView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 4, crossAxisSpacing: 12, mainAxisSpacing: 12),
            itemCount: _avatars.length,
            itemBuilder: (context, index) {
              final avatar = _avatars[index];
              final isSelected = selectedId == avatar['id'];
              return GestureDetector(
                onTap: () => onSelect(avatar['id']),
                child: Container(
                  decoration: BoxDecoration(
                    gradient: isSelected ? LinearGradient(colors: [avatar['color'], avatar['color'].withOpacity(0.7)]) : null,
                    color: isSelected ? null : Colors.grey.shade200,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: isSelected ? Colors.white : Colors.transparent, width: 2),
                  ),
                  child: Icon(avatar['icon'], size: 28, color: isSelected ? Colors.white : avatar['color']),
                ),
              );
            },
          ),
        ],
      ),
    );
  }

  Widget _buildBackButton() {
    return Row(
      children: [
        IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white, size: 28),
          onPressed: _prevStep,
        ),
      ],
    );
  }

  Widget _buildNextButton(bool isEnabled) {
    return Container(
      width: double.infinity, height: 56,
      decoration: BoxDecoration(
        gradient: isEnabled ? AppColors.sunsetGradient : null,
        color: isEnabled ? null : Colors.grey,
        borderRadius: BorderRadius.circular(28),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          borderRadius: BorderRadius.circular(28),
          onTap: isEnabled ? _nextStep : null,
          child: const Center(
            child: Row(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Next Step', style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                SizedBox(width: 8),
                Icon(Icons.arrow_forward, color: Colors.white),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildCompleteButton() {
    return BlocBuilder<AuthBloc, AuthState>(
      builder: (context, state) {
        return Container(
          width: double.infinity, height: 56,
          decoration: BoxDecoration(
            gradient: AppColors.sunsetGradient,
            borderRadius: BorderRadius.circular(28),
            boxShadow: [BoxShadow(color: AppColors.primaryOrange.withOpacity(0.3), blurRadius: 15, offset: const Offset(0, 5))],
          ),
          child: Material(
            color: Colors.transparent,
            child: InkWell(
              borderRadius: BorderRadius.circular(28),
              onTap: state is AuthLoading ? null : _completeRegistration,
              child: Center(
                child: state is AuthLoading
                    ? const SizedBox(width: 24, height: 24, child: CircularProgressIndicator(strokeWidth: 2, valueColor: AlwaysStoppedAnimation<Color>(Colors.white)))
                    : const Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.celebration, color: Colors.white),
                          SizedBox(width: 8),
                          Text('Complete Registration', style: TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.bold)),
                        ],
                      ),
              ),
            ),
          ),
        );
      },
    );
  }

  Future<void> _selectBirthday() async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: DateTime.now().subtract(const Duration(days: 365 * 10)),
      firstDate: DateTime(1950),
      lastDate: DateTime.now(),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: const ColorScheme.light(
              primary: AppColors.primaryTeal,
              onPrimary: Colors.white,
              surface: Colors.white,
              onSurface: AppColors.darkGray,
            ),
          ),
          child: child!,
        );
      },
    );
    if (picked != null) setState(() => _selectedBirthday = picked);
  }
}